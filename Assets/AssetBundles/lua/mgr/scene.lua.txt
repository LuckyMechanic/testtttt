local Scene = class('Scene')

local CSSceneManager = CS.UnityEngine.SceneManagement.SceneManager

function Scene:ctor()
    -- 监听场景切换
    local event = function()
        if(self.nowScene~=nil) then
            broadcast:notify(BROADCAST_CODE.SCENE_LOAD, self.nowScene.name,table.unpack(self.nowScene.arg))
        end
    end
    CSSceneManager.sceneLoaded("+", event)
    broadcast:on(BROADCAST_CODE.MONO("OnDestroy"),function()
        CSSceneManager.sceneLoaded("-", event)
    end)

    -- 监听场景相关广播
    self:RegistSceneClass();
end

function Scene:load(name,loadArg,cb,...)
    if(self.nowScene~=nil) then
        broadcast:notify(BROADCAST_CODE.SCENE_UNLOAD,self.nowScene.name);
    end
    local luaName = string.format("scene_%s",string.lower(name))
    local cls = require(luaName)

    local arg = {...}
    self.nowScene = cls:new(loadArg,table.unpack(arg))

    broadcast:notify(BROADCAST_CODE.SCENE_LOAD_START, table.unpack(arg))
    CS.LuaUtil.Instance:LoadScene(
        name,
        function(ao)
            broadcast:notify(BROADCAST_CODE.SCENE_LOAD_END,table.unpack(table.merge({ao},arg)))
            if(cb~=nil) then cb(name,ao) end
        end,
        function (ao, progress)
            broadcast:notify(BROADCAST_CODE.SCENE_LOADING,table.unpack(table.merge({ao,progress},arg)))
        end,
        false,
        CS.UnityEngine.SceneManagement.LoadSceneMode.Single
    );
end
-- 注册Scene类基础功能
function Scene:RegistSceneClass()
    broadcast:on(BROADCAST_CODE.SCENE_UNLOAD,self.onSceneUnLoad,self)
    broadcast:on(BROADCAST_CODE.SCENE_LOAD_START,self.onSceneLoadStart,self)
    broadcast:on(BROADCAST_CODE.SCENE_LOADING,self.onSceneLoading,self)
    broadcast:on(BROADCAST_CODE.SCENE_LOAD_END,self.onSceneLoadEnd,self)
    broadcast:on(BROADCAST_CODE.SCENE_LOAD,self.onSceneLoad,self)
end

function Scene:onSceneUnLoad()
    self.nowScene:close()
end
function Scene:onSceneLoadStart(...)
    self.nowScene:onLoadStart(...)
end
function Scene:onSceneLoading(...)
    self.nowScene:onLoading(...)
end
function Scene:onSceneLoadEnd(...)
    self.nowScene:onLoadEnd(...)
end
function Scene:onSceneLoad(...)
    self.nowScene:onLoad(...)
end
return Scene