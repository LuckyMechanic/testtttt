local Asset = class('Asset')
local CSAssetUtil = CS.AssetUtil.Instance

function Asset:_load(type, key, assetName)
    local asset = CSAssetUtil:LoadAsset(typeof(type), key, assetName)
    return asset
end
function Asset:_loadAsync(type, key, assetName, cb)
    CSAssetUtil:LoadAssetAsync(
        typeof(type),
        key,
        assetName,
        function(asset)
            cb(asset)
        end
    )
end
function Asset:_loadAll(type,key)
    local assets = CSAssetUtil:LoadAllAsset(typeof(type), key)
    return table.csArrayToTable(assets);
end
function Asset:_loadAllAsync(type,key,cb)
    CSAssetUtil:LoadAllAssetAsync(
        typeof(type),
        key,
        function(assets)
            cb(table.csArrayToTable(assets))
        end
    )
end
-- 加载类型资源函数动态创建 string与bytes并不通用 另外写
local loadInfoList = {
    {key="Prefab",type=CS.UnityEngine.GameObject},
    {key="Sprite",type=CS.UnityEngine.Sprite},
    {key="Animator",type=CS.UnityEngine.RuntimeAnimatorController},
}

for index, info in ipairs(loadInfoList) do
    Asset[string.format("load%s",info.key)] = function(this,key,assetName)
        return Common.call(this,this._load, info.type , key , assetName)
    end
    Asset[string.format("load%sAsync",info.key)] = function(this,key,assetName,cb)
        return Common.call(this,this._loadAsync, info.type , key, assetName , cb)
    end
    Asset[string.format("loadAll%s",info.key)] = function(this,key)
        return Common.call(this,this._loadAll, info.type , key )
    end
    Asset[string.format("loadAll%sAsync",info.key)] = function(this,key,cb)
        return Common.call(this,this._loadAllAsync, info.type , key ,cb )
    end
end

function Asset:loadString(key, assetName)
    local asset = self:_load(CS.UnityEngine.Object, key, assetName)
    if (asset == nil) then
        return nil
    end
    local result = asset:ToString()
    self:unloadAsset(asset)
    return result
end
function Asset:loadStringAsync(key, assetName, cb)
    self:_loadAsync(
        CS.UnityEngine.Object,
        key,
        assetName,
        function(asset)
            if (asset == nil) then
                cb(nil)
                return
            end
            local result = asset:ToString()
            -- 异步直接卸载时容易出现并发问题，暂不自动卸载
            -- self:unloadAsset(asset)
            cb(result)
        end
    )
end
function Asset:loadAllString(key)
    local assets = self:_loadAll(CS.UnityEngine.Object,key);
    local result = {}
    for index, asset in ipairs(assets) do
        table.insert(result,asset:ToString())
        -- self:unloadAsset(asset);
    end
    return result
end
function Asset:loadAllStringAsync(key, cb)
    self:_loadAllAsync(
        CS.UnityEngine.Object,
        key,
        function(assets)
            local result = {}
            for index, asset in ipairs(assets) do
                table.insert(result,asset:ToString())
                -- 异步直接卸载时容易出现并发问题，暂不自动卸载
                -- self:unloadAsset(asset)
            end
            cb(result)
        end
    )
end
function Asset:loadBytes(key, assetName)
    local asset = self:_load(CS.UnityEngine.Object, key, assetName)
    if (asset == nil) then
        return nil
    end
    local result = asset.bytes
    self:unloadAsset(asset)
    return result
end
function Asset:loadBytesAsync(key, assetName, cb)
    self:_loadAsync(
        CS.UnityEngine.Object,
        key,
        assetName,
        function(asset)
            if (asset == nil) then
                cb(nil)
                return
            end
            local result = asset.bytes
            -- 异步直接卸载时容易出现并发问题，暂不自动卸载
            -- self:unloadAsset(asset)
            cb(result)
        end
    )
end
function Asset:loadAllBytes(key)
    local assets = self:_loadAll(CS.UnityEngine.Object,key);
    local result = {}
    for index, asset in ipairs(assets) do
        table.insert(result,asset.bytes)
        -- self:unloadAsset(asset);
    end
    return result
end
function Asset:loadAllBytesAsync(key, cb)
    self:_loadAllAsync(
        CS.UnityEngine.Object,
        key,
        function(assets)
            local result = {}
            for index, asset in ipairs(assets) do
                table.insert(result,asset.bytes)
                -- 异步直接卸载时容易出现并发问题，暂不自动卸载
                -- self:unloadAsset(asset)
            end
            cb(result)
        end
    )
end

function Asset:unloadAsset(asset)
    CSAssetUtil:UnloadAsset(asset)
end
return Asset
