local UIControl = class("UIControl")
---------------- base ----------------
---@type string
UIControl.getter.name = function(this)
    return this.node.name
end
---@type Transform
UIControl.getter.transform = function(this)
    return this.node
end
---@type GameObject
UIControl.getter.gameObject = function(this)
    if(self.gameObject==nil) then
        self.gameObject = this.node.gameObject
    end
    return self.gameObject
end
---@type RectTransform
UIControl.getter.rectTransform = function(this)
    return this:getComponent(CS.UnityEngine.RectTransform,'rectTransform')
end
---------------- graphic ----------------
---@type Graphic
UIControl.getter.graphic = function(this)
    return this:getComponent(CS.UnityEngine.UI.Graphic,"graphic")
end
UIControl.getter.image = function (this)
    return this.graphic
end
UIControl.getter.rawImage = function (this)
    return this.graphic
end
UIControl.getter.text = function(this)
    return this.graphic
end
---------------- selectable ----------------
---@type Selectable
UIControl.getter.selectable = function(this)
    return this:getComponent(CS.UnityEngine.UI.Selectable,"selectable")
end
---@type Button
UIControl.getter.button = function(this)
    return this.selectable
end
---@type Dropdown
UIControl.getter.dropdown = function(this)
    return this.selectable
end
---@type InputField
UIControl.getter.inputField = function(this)
    return this.selectable
end
---@type Scrollbar
UIControl.getter.scrollbar = function(this)
    return this.selectable
end
---@type Slider
UIControl.getter.slider = function(this)
    return this.selectable
end
---@type Toggle
UIControl.getter.toggle = function(this)
    return this.selectable
end

-- 构造函数
function UIControl:ctor(node,path)
    path = path or ''
    self.node = node:Find(path)
    self.root = node
    self.path = path

    self.unityEventInfo = {}
end
-- 卸载事件
function UIControl:close()
    -- 清理所有UnityEvent监听事件
    for unityEvent, infos in pairs(self.unityEventInfo) do
        self:clearUnityEventListener(unityEvent)
    end
end

-- 获得Component
---@param t CS.Type Component Type
---@param name string 可为空 对应缓存属性名，获取成功将自动存储至self中
function UIControl:getComponent(t,name)
    local c = rawget(self,name)
    if(c~=nil) then return c end
    c = comp:getCSComponent(self.node,t)
    if(c==nil) then return nil end
    if(name~=nil) then
        self[name] = c
    end
    return c
end
-- 获得Component 不存在则添加
---@param t CS.Type Component Type
---@param name string 可为空 对应缓存属性名，获取成功将自动存储至self中
function UIControl:getOrAddComponent(t,name)
    local c = rawget(self,name)
    if(c~=nil) then return c end
    c = comp:getCSComponent(self.node,t)
    if(c==nil) then
        c = comp:addCSComponent(self.node,t)
    end
    if(name~=nil) then
        self[name] = c
    end
    return c
end

-- 添加UnityEvent监听事件
---@param unityEvent UnityEvent
---@param callback Action
function UIControl:addUnityEventListener(unityEvent,this,callback,uiControl,...)
    local data = {...}
    local event = function(...)
        local arg = table.merge({uiControl},{...},data)
        Common.call(this,callback,table.unpack(arg))
    end
    local info = {callback=callback,event=event}

    unityEvent:AddListener(info.event)

    if(not self.unityEventInfo[unityEvent]) then
        self.unityEventInfo[unityEvent] = {}
    end
    table.insert(self.unityEventInfo[unityEvent],info)

    return true
end
-- 移除UnityEvent监听事件
---@param unityEvent UnityEvent
---@param callback Action
function UIControl:removeUnityEventListener(unityEvent,callback)
    if(not self.unityEventInfo[unityEvent]) then return false end
    for index, info in ipairs(self.unityEventInfo[unityEvent]) do
        if(info.callback==callback) then
            unityEvent:RemoveListener(info.event)
            unityEvent:Invoke();

            table.remove(self.unityEventInfo[unityEvent],index)
            return true
        end
    end
    return false
end
-- 移除UnityEvent所有监听事件
---@param unityEvent UnityEvent
function UIControl:clearUnityEventListener(unityEvent)
    if(not self.unityEventInfo[unityEvent]) then return false end
    unityEvent:RemoveAllListeners()
    unityEvent:Invoke();

    self.unityEventInfo[unityEvent] = nil
end

---------------- graphic ----------------
--- Image
function UIControl:setSprite(sprite)
    self.image.sprite = sprite
end
function UIControl:setFillAmount(value)
    self.image.fillAmount = value
end
--- RawImage
function UIControl:setTexture(texture)
    self.rawImage.texture = texture
end
--- Text
function UIControl:getText(text)
    return self.text.text
end
function UIControl:setText(text)
    self.text.text = text
end
---------------- selectable ----------------
--- Button
function UIControl:setOnButtonClick(this,callback,data)
    local unityEvent = self.button.onClick
    self:clearUnityEventListener(unityEvent)
    self:addUnityEventListener(unityEvent,this,callback,self,data)
end
--- Dropdown
function UIControl:getDropdownValue()
    return self.dropdown.value
end
function UIControl:setDropdownValue(value)
    self.dropdown.value = value
end
function UIControl:setOnDropdownValueChanged(this,callback,data)
    local unityEvent = self.dropdown.onValueChanged
    self:clearUnityEventListener(unityEvent)
    self:addUnityEventListener(unityEvent,this,callback,self,data)
end
-- InputField
function UIControl:getInputText()
    return self.inputField.text
end
function UIControl:setInputText(text)
    self.inputField.text = text
end
function UIControl:setOnInputFieldValueChanged(this,callback,data)
    local unityEvent = self.inputField.onValueChanged
    self:clearUnityEventListener(unityEvent)
    self:addUnityEventListener(unityEvent,this,callback,self,data)
end
function UIControl:setOnInputFieldEndEdit(this,callback,data)
    local unityEvent = self.inputField.onEndEdit
    self:clearUnityEventListener(unityEvent)
    self:addUnityEventListener(unityEvent,this,callback,self,data)
end
--- Scrollbar
function UIControl:getScrollbarValue()
    return self.scrollbar.value
end
function UIControl:setScrollbarValue(value)
    self.scrollbar.value = value
end
function UIControl:setOnScrollbarValueChanged(this,callback,data)
    local unityEvent = self.scrollbar.onValueChanged
    self:clearUnityEventListener(unityEvent)
    self:addUnityEventListener(unityEvent,this,callback,self,data)
end
--- Slider
function UIControl:getSliderValue()
    return self.slider.value
end
function UIControl:setSliderValue(value)
    self.slider.value = value
end
function UIControl:setOnSliderValueChanged(this,callback,data)
    local unityEvent = self.slider.onValueChanged
    self:clearUnityEventListener(unityEvent)
    self:addUnityEventListener(unityEvent,this,callback,self,data)
end
--- Toggle
function UIControl:getIsOn()
    return self.toggle.isOn
end
function UIControl:setIsOn(isOn)
    self.toggle.isOn = isOn
end
function UIControl:setOnToggleValueChanged(this,callback,data)
    local unityEvent = self.toggle.onValueChanged
    self:clearUnityEventListener(unityEvent)
    self:addUnityEventListener(unityEvent,this,callback,self,data)
end

return UIControl