local Asset = class('Asset')
local CSAssetUtil = CS.AssetUtil.Instance
function Asset:_load(type, key, assetName)
    local asset = CSAssetUtil:LoadAsset(typeof(type), key, assetName)
    return asset
end
function Asset:_loadAsync(type, key, assetName, cb)
    CSAssetUtil:LoadAssetAsync(
        typeof(type),
        key,
        assetName,
        function(asset)
            cb(asset)
        end
    )
end

function Asset:loadString(key, assetName)
    local asset = self:_load(CS.UnityEngine.Object, key, assetName, true)
    if (asset == nil) then
        return nil
    end
    local result = asset:ToString()
    self:unloadAsset(asset)
    return result
end
function Asset:loadStringAsync(key, assetName, cb)
    self:_loadAsync(
        CS.UnityEngine.Object,
        key,
        assetName,
        function(asset)
            if (asset == nil) then
                cb(nil)
                return
            end
            local result = asset:ToString()
            -- 异步直接卸载时容易出现并发问题，暂不自动卸载
            -- self:unloadAsset(asset)
            cb(result)
        end,
        true
    )
end
function Asset:loadBytes(key, assetName)
    local asset = self:_load(CS.UnityEngine.Object, key, assetName, true)
    if (asset == nil) then
        return nil
    end
    local result = asset.bytes
    self:unloadAsset(asset)
    return result
end
function Asset:loadBytesAsync(key, assetName, cb)
    self:_loadAsync(
        CS.UnityEngine.Object,
        key,
        assetName,
        function(asset)
            if (asset == nil) then
                cb(nil)
                return
            end
            local result = asset.bytes
            -- 异步直接卸载时容易出现并发问题，暂不自动卸载
            -- self:unloadAsset(asset)
            cb(result)
        end,
        true
    )
end
function Asset:loadPrefab(key, assetName)
    return self:_load(CS.UnityEngine.GameObject, key, assetName)
end
function Asset:loadPrefabAsync(key, assetName, cb)
    self:_loadAsync(CS.UnityEngine.GameObject, key, assetName, cb)
end
function Asset:loadSprite(key, assetName)
    return self:_load(CS.UnityEngine.Sprite, key, assetName)
end
function Asset:loadSpriteAsync(key, assetName, cb)
    self:_loadAsync(CS.UnityEngine.Sprite, key, assetName, cb)
end
function Asset:loadAnimator(key, assetName)
    return self:_load(CS.UnityEngine.RuntimeAnimatorController, key, assetName)
end
function Asset:loadAnimatorAsync(key, assetName, cb)
    self:_loadAsync(CS.UnityEngine.RuntimeAnimatorController, key, assetName, cb)
end
function Asset:unloadAsset(asset)
    CSAssetUtil:UnloadAsset(asset)
end
return Asset
