local Mono = class("Mono")
local CSMonoUtil = CS.MonoUtil.Instance
local MonoComp = CSMonoUtil.MonoComponent

local CSSceneManager = CS.UnityEngine.SceneManagement.SceneManager
local monoEventMap = {}

function Mono:ctor()
    self.monoNode = CSMonoUtil.MonoNode
    for index, mono in ipairs(MONO_LIFECYCLE.GLOBAL) do
        local event = function(arg1)  -- 目前只可能有一个参数
            broadcast:notify(BROADCAST_CODE.MONO(mono), arg1)
        end
        monoEventMap[mono] = event;
    end

    self:Regist();
    broadcast:on(BROADCAST_CODE.MONO("OnDisable"),function()
        self:UnRegist();
    end)
end
function Mono:Regist()
    for index, mono in ipairs(MONO_LIFECYCLE.GLOBAL) do
        local event = monoEventMap[mono];
        local eventName = string.format("%sEvent",mono)
        MonoComp[eventName](MonoComp,"+",event)
    end
    CSSceneManager.sceneLoaded("+",function(s,l)
        print("切换场景");
    end)
end
function Mono:UnRegist()
    for index, mono in ipairs(MONO_LIFECYCLE.GLOBAL) do
        local event = monoEventMap[mono];
        local eventName = string.format("%sEvent",mono)
        MonoComp[eventName](MonoComp,"-",event)
    end
end

return Mono
